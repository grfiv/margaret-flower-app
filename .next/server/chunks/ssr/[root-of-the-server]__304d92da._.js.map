{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/lib/supabaseServer.ts"],"sourcesContent":["// lib/supabaseServer.ts\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\n\n/** Server-side Supabase client (Next 15: cookies() is async) */\nexport async function supabaseServer() {\n  const cookieStore = await cookies();\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: { [key: string]: unknown }) {\n          try {\n            cookieStore.set(name, value, options);\n          } catch {\n            // The `set` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n        remove(name: string, options: { [key: string]: unknown }) {\n          try {\n            cookieStore.set(name, '', { ...options, maxAge: 0 });\n          } catch {\n            // The `remove` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;AACA;AAAA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,8PAAA,CAAA,UAAO,AAAD;IAChC,OAAO,CAAA,GAAA,sRAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAmC;gBAClE,IAAI;oBACF,YAAY,GAAG,CAAC,MAAM,OAAO;gBAC/B,EAAE,OAAM;gBACN,uDAAuD;gBACvD,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;YACA,QAAO,IAAY,EAAE,OAAmC;gBACtD,IAAI;oBACF,YAAY,GAAG,CAAC,MAAM,IAAI;wBAAE,GAAG,OAAO;wBAAE,QAAQ;oBAAE;gBACpD,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/components/admin/sign-in.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/admin/sign-in.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/admin/sign-in.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,4WAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/components/admin/sign-in.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/admin/sign-in.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/admin/sign-in.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,4WAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/lib/admin-users.ts"],"sourcesContent":["// lib/admin-users.ts\nimport { supabaseServer } from './supabaseServer';\nimport { createClient } from '@supabase/supabase-js';\n\n// Fallback lists (used if database is not available)\nconst FALLBACK_SUPER_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n].map(e => e.toLowerCase());\n\nconst FALLBACK_ALLOWED_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n  'plantnovantatives@gmail.com',\n].map(e => e.toLowerCase());\n\nexport interface AdminUser {\n  id: number;\n  email: string;\n  is_super_user: boolean;\n  created_at: string;\n  created_by: string | null;\n  active: boolean;\n}\n\n// Get admin users from database (server-side only)\nexport async function getAdminUsers(): Promise<AdminUser[]> {\n  try {\n    const supabase = await supabaseServer();\n    const { data, error } = await supabase\n      .from('admin_users')\n      .select('*')\n      .eq('active', true)\n      .order('created_at');\n\n    if (error) {\n      console.warn('Failed to fetch admin users from database:', error.message);\n      return [];\n    }\n\n    return data || [];\n  } catch (error) {\n    console.warn('Database admin users lookup failed:', error);\n    return [];\n  }\n}\n\n// Check if user is allowed admin (with fallback)\nexport async function isAllowedAdmin(email: string): Promise<boolean> {\n  if (!email) return false;\n  \n  const normalizedEmail = email.toLowerCase();\n  \n  try {\n    const adminUsers = await getAdminUsers();\n    \n    // If we got data from database, use it\n    if (adminUsers.length > 0) {\n      return adminUsers.some(user => user.email.toLowerCase() === normalizedEmail);\n    }\n    \n    // Fallback to hardcoded list if database not available\n    console.warn('Using fallback admin users list');\n    return FALLBACK_ALLOWED_USERS.includes(normalizedEmail);\n  } catch (error) {\n    console.warn('Admin check failed, using fallback:', error);\n    return FALLBACK_ALLOWED_USERS.includes(normalizedEmail);\n  }\n}\n\n// Check if user is super user (with fallback)\nexport async function isSuperUser(email: string): Promise<boolean> {\n  if (!email) return false;\n  \n  const normalizedEmail = email.toLowerCase();\n  \n  try {\n    const adminUsers = await getAdminUsers();\n    \n    // If we got data from database, use it\n    if (adminUsers.length > 0) {\n      return adminUsers.some(user => \n        user.email.toLowerCase() === normalizedEmail && user.is_super_user\n      );\n    }\n    \n    // Fallback to hardcoded list if database not available\n    console.warn('Using fallback super users list');\n    return FALLBACK_SUPER_USERS.includes(normalizedEmail);\n  } catch (error) {\n    console.warn('Super user check failed, using fallback:', error);\n    return FALLBACK_SUPER_USERS.includes(normalizedEmail);\n  }\n}\n\n// Add admin user to database (server-side only)\nexport async function addAdminUser(\n  email: string, \n  createdBy: string, \n  isSuperUser: boolean = false\n): Promise<{ success: boolean; error?: string; user?: AdminUser }> {\n  try {\n    // Use service role for admin operations\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { data, error } = await supabaseAdmin\n      .from('admin_users')\n      .insert({\n        email: email.toLowerCase(),\n        is_super_user: isSuperUser,\n        created_by: createdBy.toLowerCase(),\n        active: true\n      })\n      .select()\n      .single();\n\n    if (error) {\n      if (error.code === '23505') { // Unique constraint violation\n        return { success: false, error: 'User is already an admin' };\n      }\n      return { success: false, error: error.message };\n    }\n\n    return { success: true, user: data };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add admin user' };\n  }\n}\n\n// Remove admin user from database (server-side only)\nexport async function removeAdminUser(\n  email: string, \n  _removedBy: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Don't allow removing super users\n    if (await isSuperUser(email)) {\n      return { success: false, error: 'Cannot remove super users' };\n    }\n\n    // Use service role for admin operations\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { error } = await supabaseAdmin\n      .from('admin_users')\n      .update({ active: false })\n      .eq('email', email.toLowerCase());\n\n    if (error) {\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to remove admin user' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/login/page.tsx"],"sourcesContent":["import { supabaseServer } from '@/lib/supabaseServer';\nimport { redirect } from 'next/navigation';\nimport Link from 'next/link';\nimport SignIn from '@/components/admin/sign-in';\nimport { isAllowedAdmin } from '@/lib/admin-users';\n\ninterface SearchParams {\n  debug?: string;\n  tab?: string;\n}\n\nexport default async function LoginPage({\n  searchParams,\n}: {\n  searchParams?: Promise<SearchParams>;\n}) {\n  const sb = await supabaseServer();\n  const {\n    data: { session },\n  } = await sb.auth.getSession();\n\n  const email = (session?.user?.email ?? '').toLowerCase();\n  const isAllowed = !!session && (await isAllowedAdmin(email));\n  \n  const resolvedSearchParams = await searchParams;\n\n  // Debug view: don't redirect; show what we see\n  if (resolvedSearchParams?.debug === '1') {\n    return (\n      <main className=\"mx-auto max-w-3xl p-6\">\n        <h1 className=\"text-2xl font-semibold mb-4\">Admin (Debug)</h1>\n        <ul className=\"text-sm space-y-2\">\n          <li><strong>Signed in:</strong> {session ? 'yes' : 'no'}</li>\n          <li><strong>Email:</strong> {email || '(none)'}</li>\n          <li><strong>Allowed:</strong> {isAllowed ? 'yes' : 'no'}</li>\n          <li><strong>Check:</strong> Dynamic admin user lookup from database</li>\n        </ul>\n        {!isAllowed && <p className=\"mt-6 text-rose-700\">If this says “no”, it would normally redirect to /login.</p>}\n      </main>\n    );\n  }\n\n  // If already authenticated and allowed, redirect to admin\n  if (isAllowed) {\n    redirect('/admin');\n  }\n\n  // Show login form for unauthenticated users\n  return (\n    <main className=\"mx-auto max-w-lg p-6\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">NOVA Admin Login</h1>\n        <p className=\"text-gray-600\">Northern Virginia Native Plants Database</p>\n      </div>\n      \n      <div className=\"bg-white rounded-lg shadow-lg p-6 border\">\n        <h2 className=\"text-xl font-semibold mb-4\">Access Required</h2>\n        <p className=\"text-gray-700 mb-6\">\n          This admin panel is restricted to authorized users only. Please enter your email address to receive a secure login link.\n        </p>\n        \n                       <SignIn initialTab={resolvedSearchParams?.tab} />\n        \n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h3 className=\"font-medium text-blue-900 mb-2\">Need Access?</h3>\n          <p className=\"text-sm text-blue-800\">\n            Contact Margaret Fisher (1margaret.e.fisher@gmail.com) or George Fisher (georgerfisher@gmail.com) to request admin access.\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"text-center mt-6\">\n        <Link \n          href=\"/\" \n          className=\"text-blue-600 hover:text-blue-800 text-sm\"\n        >\n          ← Back to Plant Database\n        </Link>\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAOe,eAAe,UAAU,EACtC,YAAY,EAGb;IACC,MAAM,KAAK,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IAC9B,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,GAAG,IAAI,CAAC,UAAU;IAE5B,MAAM,QAAQ,CAAC,SAAS,MAAM,SAAS,EAAE,EAAE,WAAW;IACtD,MAAM,YAAY,CAAC,CAAC,WAAY,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD,EAAE;IAErD,MAAM,uBAAuB,MAAM;IAEnC,+CAA+C;IAC/C,IAAI,sBAAsB,UAAU,KAAK;QACvC,qBACE,6WAAC;YAAK,WAAU;;8BACd,6WAAC;oBAAG,WAAU;8BAA8B;;;;;;8BAC5C,6WAAC;oBAAG,WAAU;;sCACZ,6WAAC;;8CAAG,6WAAC;8CAAO;;;;;;gCAAmB;gCAAE,UAAU,QAAQ;;;;;;;sCACnD,6WAAC;;8CAAG,6WAAC;8CAAO;;;;;;gCAAe;gCAAE,SAAS;;;;;;;sCACtC,6WAAC;;8CAAG,6WAAC;8CAAO;;;;;;gCAAiB;gCAAE,YAAY,QAAQ;;;;;;;sCACnD,6WAAC;;8CAAG,6WAAC;8CAAO;;;;;;gCAAe;;;;;;;;;;;;;gBAE5B,CAAC,2BAAa,6WAAC;oBAAE,WAAU;8BAAqB;;;;;;;;;;;;IAGvD;IAEA,0DAA0D;IAC1D,IAAI,WAAW;QACb,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,4CAA4C;IAC5C,qBACE,6WAAC;QAAK,WAAU;;0BACd,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAG,WAAU;kCAAwC;;;;;;kCACtD,6WAAC;wBAAE,WAAU;kCAAgB;;;;;;;;;;;;0BAG/B,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,6WAAC;wBAAE,WAAU;kCAAqB;;;;;;kCAInB,6WAAC,kIAAA,CAAA,UAAM;wBAAC,YAAY,sBAAsB;;;;;;kCAEzD,6WAAC;wBAAI,WAAU;;0CACb,6WAAC;gCAAG,WAAU;0CAAiC;;;;;;0CAC/C,6WAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;;;;;;;0BAMzC,6WAAC;gBAAI,WAAU;0BACb,cAAA,6WAAC,2RAAA,CAAA,UAAI;oBACH,MAAK;oBACL,WAAU;8BACX;;;;;;;;;;;;;;;;;AAMT","debugId":null}}]
}
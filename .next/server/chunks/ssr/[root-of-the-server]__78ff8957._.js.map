{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/lib/supabaseServer.ts"],"sourcesContent":["// lib/supabaseServer.ts\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\n\n/** Server-side Supabase client (Next 15: cookies() is async) */\nexport async function supabaseServer() {\n  const cookieStore = await cookies();\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: { [key: string]: unknown }) {\n          try {\n            cookieStore.set(name, value, options);\n          } catch {\n            // The `set` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n        remove(name: string, options: { [key: string]: unknown }) {\n          try {\n            cookieStore.set(name, '', { ...options, maxAge: 0 });\n          } catch {\n            // The `remove` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;AACA;AAAA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,8PAAA,CAAA,UAAO,AAAD;IAChC,OAAO,CAAA,GAAA,sRAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAmC;gBAClE,IAAI;oBACF,YAAY,GAAG,CAAC,MAAM,OAAO;gBAC/B,EAAE,OAAM;gBACN,uDAAuD;gBACvD,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;YACA,QAAO,IAAY,EAAE,OAAmC;gBACtD,IAAI;oBACF,YAAY,GAAG,CAAC,MAAM,IAAI;wBAAE,GAAG,OAAO;wBAAE,QAAQ;oBAAE;gBACpD,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/actions/flowers.ts"],"sourcesContent":["// app/actions/flowers.ts\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { supabaseServer } from '@/lib/supabaseServer';\nimport type { Flower, UpsertInput } from '@/lib/types';\n\nexport async function listFlowers(): Promise<{ data: Flower[]; error: string | null }> {\n  const supabase = await supabaseServer();\n  const { data, error } = await supabase\n    .from('flowers')\n    .select('id, latin, common, image_name, height_code')\n    .order('id', { ascending: true });\n  return { data: (data as Flower[]) ?? [], error: error?.message ?? null };\n}\n\nexport async function getFlower(id: number): Promise<{ data: Flower | null; error: string | null }> {\n  const supabase = await supabaseServer();\n  const { data, error } = await supabase.from('flowers').select('*').eq('id', id).maybeSingle();\n  return { data: (data as Flower) ?? null, error: error?.message ?? null };\n}\n\nexport async function upsertFlower(input: UpsertInput): Promise<{ data: Flower | null; error: string | null }> {\n  const supabase = await supabaseServer();\n  const { data, error } = await supabase\n    .from('flowers')\n    .upsert(input, { onConflict: 'id' })\n    .select('*')\n    .maybeSingle();\n\n  if (!error) {\n    revalidatePath('/admin');\n    revalidatePath('/');\n  }\n  return { data: (data as Flower) ?? null, error: error?.message ?? null };\n}\n\nexport async function deleteFlower(id: number): Promise<{ error: string | null }> {\n  const supabase = await supabaseServer();\n  const { error } = await supabase.from('flowers').delete().eq('id', id);\n  if (!error) {\n    revalidatePath('/admin');\n    revalidatePath('/');\n  }\n  return { error: error?.message ?? null };\n}"],"names":[],"mappings":"AAAA,yBAAyB;;;;;;;;AAGzB;AACA;;;;;AAGO,eAAe;IACpB,MAAM,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IACpC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,WACL,MAAM,CAAC,8CACP,KAAK,CAAC,MAAM;QAAE,WAAW;IAAK;IACjC,OAAO;QAAE,MAAM,AAAC,QAAqB,EAAE;QAAE,OAAO,OAAO,WAAW;IAAK;AACzE;AAEO,eAAe,UAAU,EAAU;IACxC,MAAM,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IACpC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,WAAW,MAAM,CAAC,KAAK,EAAE,CAAC,MAAM,IAAI,WAAW;IAC3F,OAAO;QAAE,MAAM,AAAC,QAAmB;QAAM,OAAO,OAAO,WAAW;IAAK;AACzE;AAEO,eAAe,aAAa,KAAkB;IACnD,MAAM,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IACpC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,WACL,MAAM,CAAC,OAAO;QAAE,YAAY;IAAK,GACjC,MAAM,CAAC,KACP,WAAW;IAEd,IAAI,CAAC,OAAO;QACV,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACjB;IACA,OAAO;QAAE,MAAM,AAAC,QAAmB;QAAM,OAAO,OAAO,WAAW;IAAK;AACzE;AAEO,eAAe,aAAa,EAAU;IAC3C,MAAM,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IACpC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,WAAW,MAAM,GAAG,EAAE,CAAC,MAAM;IACnE,IAAI,CAAC,OAAO;QACV,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACjB;IACA,OAAO;QAAE,OAAO,OAAO,WAAW;IAAK;AACzC;;;IAtCsB;IASA;IAMA;IAeA;;AA9BA,8WAAA;AASA,8WAAA;AAMA,8WAAA;AAeA,8WAAA","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/lib/admin-users.ts"],"sourcesContent":["// lib/admin-users.ts\nimport { supabaseServer } from './supabaseServer';\nimport { createClient } from '@supabase/supabase-js';\n\n// Fallback lists (used if database is not available)\nconst FALLBACK_SUPER_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n].map(e => e.toLowerCase());\n\nconst FALLBACK_ALLOWED_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n  'plantnovantatives@gmail.com',\n].map(e => e.toLowerCase());\n\nexport interface AdminUser {\n  id: number;\n  email: string;\n  is_super_user: boolean;\n  created_at: string;\n  created_by: string | null;\n  active: boolean;\n}\n\n// Get admin users from database (server-side only)\nexport async function getAdminUsers(): Promise<AdminUser[]> {\n  try {\n    const supabase = await supabaseServer();\n    const { data, error } = await supabase\n      .from('admin_users')\n      .select('*')\n      .eq('active', true)\n      .order('created_at');\n\n    if (error) {\n      console.warn('Failed to fetch admin users from database:', error.message);\n      return [];\n    }\n\n    return data || [];\n  } catch (error) {\n    console.warn('Database admin users lookup failed:', error);\n    return [];\n  }\n}\n\n// Check if user is allowed admin (with fallback)\nexport async function isAllowedAdmin(email: string): Promise<boolean> {\n  if (!email) return false;\n  \n  const normalizedEmail = email.toLowerCase();\n  \n  try {\n    const adminUsers = await getAdminUsers();\n    \n    // If we got data from database, use it\n    if (adminUsers.length > 0) {\n      return adminUsers.some(user => user.email.toLowerCase() === normalizedEmail);\n    }\n    \n    // Fallback to hardcoded list if database not available\n    console.warn('Using fallback admin users list');\n    return FALLBACK_ALLOWED_USERS.includes(normalizedEmail);\n  } catch (error) {\n    console.warn('Admin check failed, using fallback:', error);\n    return FALLBACK_ALLOWED_USERS.includes(normalizedEmail);\n  }\n}\n\n// Check if user is super user (with fallback)\nexport async function isSuperUser(email: string): Promise<boolean> {\n  if (!email) return false;\n  \n  const normalizedEmail = email.toLowerCase();\n  \n  try {\n    const adminUsers = await getAdminUsers();\n    \n    // If we got data from database, use it\n    if (adminUsers.length > 0) {\n      return adminUsers.some(user => \n        user.email.toLowerCase() === normalizedEmail && user.is_super_user\n      );\n    }\n    \n    // Fallback to hardcoded list if database not available\n    console.warn('Using fallback super users list');\n    return FALLBACK_SUPER_USERS.includes(normalizedEmail);\n  } catch (error) {\n    console.warn('Super user check failed, using fallback:', error);\n    return FALLBACK_SUPER_USERS.includes(normalizedEmail);\n  }\n}\n\n// Add admin user to database (server-side only)\nexport async function addAdminUser(\n  email: string, \n  createdBy: string, \n  isSuperUser: boolean = false\n): Promise<{ success: boolean; error?: string; user?: AdminUser }> {\n  try {\n    // Use service role for admin operations\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { data, error } = await supabaseAdmin\n      .from('admin_users')\n      .insert({\n        email: email.toLowerCase(),\n        is_super_user: isSuperUser,\n        created_by: createdBy.toLowerCase(),\n        active: true\n      })\n      .select()\n      .single();\n\n    if (error) {\n      if (error.code === '23505') { // Unique constraint violation\n        return { success: false, error: 'User is already an admin' };\n      }\n      return { success: false, error: error.message };\n    }\n\n    return { success: true, user: data };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add admin user' };\n  }\n}\n\n// Remove admin user from database (server-side only)\nexport async function removeAdminUser(\n  email: string, \n  _removedBy: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Don't allow removing super users\n    if (await isSuperUser(email)) {\n      return { success: false, error: 'Cannot remove super users' };\n    }\n\n    // Use service role for admin operations\n    const supabaseAdmin = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { error } = await supabaseAdmin\n      .from('admin_users')\n      .update({ active: false })\n      .eq('email', email.toLowerCase());\n\n    if (error) {\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to remove admin user' };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 306, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/actions/user-management.ts"],"sourcesContent":["// app/actions/user-management.ts\n'use server';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { isSuperUser, addAdminUser } from '@/lib/admin-users';\n\n// Use service role key for admin operations\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nexport async function inviteUser(email: string, currentUserEmail: string) {\n  try {\n    // Check if current user is a super user (dynamic check)\n    const isCurrentUserSuper = await isSuperUser(currentUserEmail);\n    if (!isCurrentUserSuper) {\n      return { error: 'Only super users can invite new users' };\n    }\n\n    // Validate email\n    if (!email || !email.includes('@')) {\n      return { error: 'Please enter a valid email address' };\n    }\n\n    // Send invitation\n    const { data, error } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/auth/callback`,\n    });\n\n    if (error) {\n      console.error('Invitation error:', error);\n      return { error: error.message };\n    }\n\n    // Add user to admin_users table\n    const addResult = await addAdminUser(email, currentUserEmail, false);\n    if (!addResult.success && !addResult.error?.includes('already an admin')) {\n      console.warn('Failed to add user to admin_users table:', addResult.error);\n      // Don't fail the invitation for this, but log it\n    }\n\n    return { \n      success: true, \n      message: `Invitation sent to ${email}. They will receive an email to set up their account.`,\n      user: data.user \n    };\n  } catch (error: unknown) {\n    console.error('Server error inviting user:', error);\n    return { error: 'Failed to send invitation. Please try again.' };\n  }\n}\n\nexport async function listUsers(currentUserEmail: string) {\n  try {\n    // Check if current user is a super user\n    const SUPER_USERS = ['1margaret.e.fisher@gmail.com', 'georgerfisher@gmail.com'];\n    if (!SUPER_USERS.includes(currentUserEmail.toLowerCase())) {\n      return { error: 'Only super users can view user list' };\n    }\n\n    const { data, error } = await supabaseAdmin.auth.admin.listUsers();\n    \n    if (error) {\n      console.error('List users error:', error);\n      return { error: error.message };\n    }\n\n    // Filter to relevant users only\n    const filteredUsers = data.users.filter(user => \n      user.email && (\n        user.email.includes('gmail.com') || \n        user.email.includes('fisher') ||\n        SUPER_USERS.includes(user.email.toLowerCase())\n      )\n    );\n\n    return { success: true, users: filteredUsers };\n  } catch (error: unknown) {\n    console.error('Server error listing users:', error);\n    return { error: 'Failed to load users. Please try again.' };\n  }\n}\n\nexport async function removeUser(userId: string, userEmail: string, currentUserEmail: string) {\n  try {\n    // Check if current user is a super user\n    const SUPER_USERS = ['1margaret.e.fisher@gmail.com', 'georgerfisher@gmail.com'];\n    if (!SUPER_USERS.includes(currentUserEmail.toLowerCase())) {\n      return { error: 'Only super users can remove users' };\n    }\n\n    // Don't allow removing super users\n    if (SUPER_USERS.includes(userEmail.toLowerCase())) {\n      return { error: 'Cannot remove super users' };\n    }\n\n    const { error } = await supabaseAdmin.auth.admin.deleteUser(userId);\n    \n    if (error) {\n      console.error('Remove user error:', error);\n      return { error: error.message };\n    }\n\n    return { \n      success: true, \n      message: `Removed access for ${userEmail}` \n    };\n  } catch (error: unknown) {\n    console.error('Server error removing user:', error);\n    return { error: 'Failed to remove user. Please try again.' };\n  }\n}\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;;;AAGjC;AACA;;;;;AAEA,4CAA4C;AAC5C,MAAM,gBAAgB,CAAA,GAAA,iQAAA,CAAA,eAAY,AAAD,gFAE/B,QAAQ,GAAG,CAAC,yBAAyB,EACrC;IACE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;IAClB;AACF;AAGK,eAAe,WAAW,KAAa,EAAE,gBAAwB;IACtE,IAAI;QACF,wDAAwD;QACxD,MAAM,qBAAqB,MAAM,CAAA,GAAA,qHAAA,CAAA,cAAW,AAAD,EAAE;QAC7C,IAAI,CAAC,oBAAoB;YACvB,OAAO;gBAAE,OAAO;YAAwC;QAC1D;QAEA,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,MAAM;YAClC,OAAO;gBAAE,OAAO;YAAqC;QACvD;QAEA,kBAAkB;QAClB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,cAAc,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,OAAO;YAC9E,YAAY,GAAG,QAAQ,GAAG,CAAC,oBAAoB,IAAI,wBAAwB,cAAc,CAAC;QAC5F;QAEA,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO;gBAAE,OAAO,MAAM,OAAO;YAAC;QAChC;QAEA,gCAAgC;QAChC,MAAM,YAAY,MAAM,CAAA,GAAA,qHAAA,CAAA,eAAY,AAAD,EAAE,OAAO,kBAAkB;QAC9D,IAAI,CAAC,UAAU,OAAO,IAAI,CAAC,UAAU,KAAK,EAAE,SAAS,qBAAqB;YACxE,QAAQ,IAAI,CAAC,4CAA4C,UAAU,KAAK;QACxE,iDAAiD;QACnD;QAEA,OAAO;YACL,SAAS;YACT,SAAS,CAAC,mBAAmB,EAAE,MAAM,qDAAqD,CAAC;YAC3F,MAAM,KAAK,IAAI;QACjB;IACF,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,OAAO;QAA+C;IACjE;AACF;AAEO,eAAe,UAAU,gBAAwB;IACtD,IAAI;QACF,wCAAwC;QACxC,MAAM,cAAc;YAAC;YAAgC;SAA0B;QAC/E,IAAI,CAAC,YAAY,QAAQ,CAAC,iBAAiB,WAAW,KAAK;YACzD,OAAO;gBAAE,OAAO;YAAsC;QACxD;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,cAAc,IAAI,CAAC,KAAK,CAAC,SAAS;QAEhE,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO;gBAAE,OAAO,MAAM,OAAO;YAAC;QAChC;QAEA,gCAAgC;QAChC,MAAM,gBAAgB,KAAK,KAAK,CAAC,MAAM,CAAC,CAAA,OACtC,KAAK,KAAK,IAAI,CACZ,KAAK,KAAK,CAAC,QAAQ,CAAC,gBACpB,KAAK,KAAK,CAAC,QAAQ,CAAC,aACpB,YAAY,QAAQ,CAAC,KAAK,KAAK,CAAC,WAAW,GAC7C;QAGF,OAAO;YAAE,SAAS;YAAM,OAAO;QAAc;IAC/C,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,OAAO;QAA0C;IAC5D;AACF;AAEO,eAAe,WAAW,MAAc,EAAE,SAAiB,EAAE,gBAAwB;IAC1F,IAAI;QACF,wCAAwC;QACxC,MAAM,cAAc;YAAC;YAAgC;SAA0B;QAC/E,IAAI,CAAC,YAAY,QAAQ,CAAC,iBAAiB,WAAW,KAAK;YACzD,OAAO;gBAAE,OAAO;YAAoC;QACtD;QAEA,mCAAmC;QACnC,IAAI,YAAY,QAAQ,CAAC,UAAU,WAAW,KAAK;YACjD,OAAO;gBAAE,OAAO;YAA4B;QAC9C;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,cAAc,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QAE5D,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,sBAAsB;YACpC,OAAO;gBAAE,OAAO,MAAM,OAAO;YAAC;QAChC;QAEA,OAAO;YACL,SAAS;YACT,SAAS,CAAC,mBAAmB,EAAE,WAAW;QAC5C;IACF,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE,OAAO;QAA2C;IAC7D;AACF;;;IApGsB;IAyCA;IA+BA;;AAxEA,8WAAA;AAyCA,8WAAA;AA+BA,8WAAA","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/actions/upload.ts"],"sourcesContent":["// app/actions/upload.ts\n'use server';\n\nimport { createClient } from '@supabase/supabase-js';\n\nexport async function uploadFile(formData: FormData) {\n  try {\n    const file = formData.get('file') as File;\n    const bucket = formData.get('bucket') as string;\n    const filename = formData.get('filename') as string;\n    \n    if (!file || !bucket || !filename) {\n      return { error: 'Missing required fields: file, bucket, or filename' };\n    }\n\n    // Use service role key for admin uploads to bypass RLS, fallback to anon\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    const supabaseKey = serviceRoleKey || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n    \n    console.log('Upload using:', serviceRoleKey ? 'service role' : 'anon key');\n    \n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      supabaseKey,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      }\n    );\n\n    // Convert file to bytes for upload\n    const bytes = await file.arrayBuffer();\n    const buffer = new Uint8Array(bytes);\n\n    // Upload to Supabase storage using service role (bypasses RLS)\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(filename, buffer, {\n        upsert: true,\n        cacheControl: '3600',\n        contentType: file.type,\n      });\n\n    if (error) {\n      console.error('Supabase upload error:', error);\n      return { error: error.message };\n    }\n\n    console.log('Successfully uploaded file:', { bucket, filename, path: data.path });\n    return { success: true, path: data.path };\n  } catch (error) {\n    console.error('Upload action error:', error);\n    return { \n      error: error instanceof Error ? error.message : 'Upload failed' \n    };\n  }\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AAGxB;;;;AAEO,eAAe,WAAW,QAAkB;IACjD,IAAI;QACF,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,SAAS,SAAS,GAAG,CAAC;QAC5B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;YACjC,OAAO;gBAAE,OAAO;YAAqD;QACvE;QAEA,yEAAyE;QACzE,MAAM,iBAAiB,QAAQ,GAAG,CAAC,yBAAyB;QAC5D,MAAM,cAAc;QAEpB,QAAQ,GAAG,CAAC,iBAAiB,iBAAiB,iBAAiB;QAE/D,MAAM,WAAW,CAAA,GAAA,iQAAA,CAAA,eAAY,AAAD,gFAE1B,aACA;YACE,MAAM;gBACJ,kBAAkB;gBAClB,gBAAgB;YAClB;QACF;QAGF,mCAAmC;QACnC,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,IAAI,WAAW;QAE9B,+DAA+D;QAC/D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,OAAO,CAC3C,IAAI,CAAC,QACL,MAAM,CAAC,UAAU,QAAQ;YACxB,QAAQ;YACR,cAAc;YACd,aAAa,KAAK,IAAI;QACxB;QAEF,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO;gBAAE,OAAO,MAAM,OAAO;YAAC;QAChC;QAEA,QAAQ,GAAG,CAAC,+BAA+B;YAAE;YAAQ;YAAU,MAAM,KAAK,IAAI;QAAC;QAC/E,OAAO;YAAE,SAAS;YAAM,MAAM,KAAK,IAAI;QAAC;IAC1C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO;YACL,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF;;;IArDsB;;AAAA,8WAAA","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/.next-internal/server/app/admin/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {upsertFlower as '40f21550eb395297375ad7fed26bbac1a0a2f25853'} from 'ACTIONS_MODULE0'\nexport {deleteFlower as '40f4f6a6f6421acf8ec1b8bd32e5a864ca00dc82d9'} from 'ACTIONS_MODULE0'\nexport {inviteUser as '60f7a10d9bd1aba3f08e120271e1d51fc891969d08'} from 'ACTIONS_MODULE1'\nexport {listUsers as '409c88db5a4b8c9650156c14f8edc02bed874f392c'} from 'ACTIONS_MODULE1'\nexport {removeUser as '70a43373beb1aaa2bec97b418e4d11973766e8952d'} from 'ACTIONS_MODULE1'\nexport {uploadFile as '400018803761d3f2710bee54aae70006023cce86ea'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AAEA;AAGA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/components/admin/admin-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/admin/admin-dashboard.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/admin/admin-dashboard.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,4WAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/components/admin/admin-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/admin/admin-dashboard.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/admin/admin-dashboard.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,4WAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 600, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 608, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/admin/page.tsx"],"sourcesContent":["// app/admin/page.tsx\nimport { supabaseServer } from '@/lib/supabaseServer';\nimport type { Flower } from '@/lib/types';\nimport AdminDashboard from '@/components/admin/admin-dashboard';\nimport Link from 'next/link';\nimport { redirect } from 'next/navigation';\nimport { isAllowedAdmin, isSuperUser } from '@/lib/admin-users';\n\n// Super users who can manage other users\nconst SUPER_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n].map(e => e.toLowerCase());\n\n// All allowed admin users (will be managed by super users later)\nconst ALLOWED_USERS = [\n  '1margaret.e.fisher@gmail.com',\n  'georgerfisher@gmail.com',\n  'plantnovantatives@gmail.com',\n  // Add your current email for testing\n  // 'your.email@example.com',\n].map(e => e.toLowerCase());\n\ntype SP = { id?: string; q?: string; debug?: string; auth?: string };\n\nexport default async function AdminPage({\n  searchParams,\n}: {\n  // Next 15 style: searchParams is a Promise\n  searchParams: Promise<SP>;\n}) {\n  const sp = await searchParams;\n  const id = sp?.id ? Number(sp.id) : undefined;\n  const q = (sp?.q ?? '').trim().toLowerCase();\n\n  const supabase = await supabaseServer();\n\n  // Check authentication\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  const email = (session?.user?.email ?? '').toLowerCase();\n  \n  // Check admin status dynamically from database\n  const isAllowed = !!session && (await isAllowedAdmin(email));\n  const isUserSuperUser = !!session && (await isSuperUser(email));\n\n  // Debug logging\n  console.log('🔍 Admin auth check:', {\n    hasSession: !!session,\n    userEmail: session?.user?.email,\n    normalizedEmail: email,\n    isAllowed,\n    isSuperUser: isUserSuperUser\n  });\n  \n  // Check if we have debug info from recent sign-in\n  let recentSignIn = null;\n  if (typeof window !== 'undefined') {\n    const debugSignin = localStorage.getItem('debug_signin');\n    if (debugSignin) {\n      recentSignIn = JSON.parse(debugSignin);\n      console.log('🔍 Previous sign-in debug info:', recentSignIn);\n      // Clear it after logging\n      localStorage.removeItem('debug_signin');\n    }\n  }\n  \n  // Check for auth token from successful login\n  let hasValidAuth = false;\n  if (sp?.auth) {\n    try {\n      const decoded = atob(sp.auth);\n      const [authEmail, timestamp] = decoded.split(':');\n      const authTime = parseInt(timestamp);\n      const now = Date.now();\n      \n      // Allow if it's from authorized users and within 5 minutes\n      const authorizedEmails = ['georgerfisher@gmail.com', '1margaret.e.fisher@gmail.com', 'plantnovantatives@gmail.com'];\n      hasValidAuth = authorizedEmails.includes(authEmail) && \n                    (now - authTime) < 300000; // 5 minutes\n      \n      console.log('🔍 Auth token check:', { authEmail, authTime, now, hasValidAuth });\n    } catch (e) {\n      console.log('🔍 Invalid auth token:', sp.auth);\n    }\n  }\n  \n  const finalIsAllowed = isAllowed || hasValidAuth;\n\n  // Debug view for troubleshooting auth\n  if (sp?.debug === '1') {\n    return (\n      <main className=\"mx-auto max-w-3xl p-6\">\n        <h1 className=\"text-2xl font-semibold mb-4\">Admin Debug</h1>\n        <div className=\"bg-gray-100 p-4 rounded-lg\">\n          <ul className=\"text-sm space-y-2\">\n            <li><strong>Signed in:</strong> {session ? 'yes' : 'no'}</li>\n            <li><strong>Email:</strong> {email || '(none)'}</li>\n            <li><strong>Allowed:</strong> {isAllowed ? 'yes' : 'no'}</li>\n            <li><strong>Super User:</strong> {isUserSuperUser ? 'yes' : 'no'}</li>\n            <li><strong>Allowed users:</strong> {ALLOWED_USERS.join(', ')}</li>\n          </ul>\n          {!isAllowed && <p className=\"mt-4 text-red-700\">Access would be denied. Try signing in at /login</p>}\n        </div>\n      </main>\n    );\n  }\n\n  // Temporary bypass for testing (remove this in production)\n  const bypassAuth = sp?.debug === 'bypass';\n  \n          // Redirect to login if not authenticated or allowed\n        if (!finalIsAllowed && !bypassAuth) {\n          redirect('/login');\n        }\n\n  // Enhanced list for the grid with more searchable fields\n  const { data: list = [] } = await supabase\n    .from('flowers')\n    .select('id, latin, common, image_name, height_code, region, design_function, gardening_tips, wildlife_comments, ph')\n    .order('id', { ascending: true });\n\n  // optional detail if id is present\n  let selected: Flower | null = null;\n  if (Number.isFinite(id)) {\n    if (id === 0) {\n      // Special case: id=0 means \"new flower\" - create a blank object\n      selected = {\n        id: 0,\n        common: '',\n        latin: '',\n        image_name: null,\n        height_code: null,\n        bloom_code: null,\n        sun_code: null,\n        moist_code: null,\n        cat_code: null,\n        deer_code: null,\n        wild_code: null,\n        soil_code: null,\n        region: '',\n        design_function: '',\n        gardening_tips: '',\n        wildlife_comments: '',\n        credit_code: null,\n        ph: '',\n      } as Flower;\n    } else {\n      // Regular case: fetch existing flower\n      const { data } = await supabase\n        .from('flowers')\n        .select('*')\n        .eq('id', id as number)\n        .maybeSingle();\n      selected = (data as Flower) ?? null;\n    }\n  }\n\n  // Enhanced search across all text fields (server side)\n  const filtered: Flower[] = q\n    ? ((list as Flower[]).filter(\n        (f) =>\n          (f.common ?? '').toLowerCase().includes(q) ||\n          (f.latin ?? '').toLowerCase().includes(q) ||\n          (f.region ?? '').toLowerCase().includes(q) ||\n          (f.design_function ?? '').toLowerCase().includes(q) ||\n          (f.gardening_tips ?? '').toLowerCase().includes(q) ||\n          (f.wildlife_comments ?? '').toLowerCase().includes(q) ||\n          (f.ph ?? '').toLowerCase().includes(q),\n      ) as Flower[])\n    : ((list as Flower[]) ?? []);\n\n  return (\n    <main className=\"mx-auto max-w-6xl p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">NOVA Admin Panel</h1>\n          <p className=\"text-sm text-gray-600\">\n            {bypassAuth ? (\n              <>\n                <span className=\"text-orange-600\">DEBUG MODE - Authentication Bypassed</span>\n              </>\n            ) : (\n              <>\n                Signed in as: <strong>{session?.user?.email || (hasValidAuth ? (sp?.auth ? atob(sp.auth).split(':')[0] : 'Unknown') : 'georgerfisher@gmail.com')}</strong>\n                                 {(isUserSuperUser || hasValidAuth) && <span className=\"ml-2 px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full\">Super User</span>}\n              </>\n            )}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Link\n            href=\"/\"\n            className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            title=\"Back to Main Site\"\n          >\n            <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n            </svg>\n            <span className=\"hidden sm:inline\">Home</span>\n          </Link>\n          {!bypassAuth && (\n            <form action=\"/auth/signout\" method=\"post\">\n              <button\n                type=\"submit\"\n                className=\"flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n                title=\"Sign Out\"\n              >\n                <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                </svg>\n                <span className=\"hidden sm:inline\">Sign Out</span>\n              </button>\n            </form>\n          )}\n        </div>\n      </div>\n\n      {/* Search box routes via ?q= */}\n      <form className=\"mb-3\">\n        {/* Preserve debug and auth parameters in form submission */}\n        {sp?.debug && <input type=\"hidden\" name=\"debug\" value={sp.debug} />}\n        {sp?.auth && <input type=\"hidden\" name=\"auth\" value={sp.auth} />}\n        <div className=\"relative\">\n          <input\n            name=\"q\"\n            defaultValue={sp?.q ?? ''}\n            placeholder=\"Search by name, region, function, tips, wildlife, pH…\"\n            className=\"w-full rounded border px-3 py-2 pr-10\"\n          />\n          {sp?.q && (\n            <Link\n              href={{ pathname: '/admin', query: { ...(sp?.debug ? { debug: sp.debug } : {}), ...(sp?.auth ? { auth: sp.auth } : {}) } }}\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n              aria-label=\"Clear search\"\n            >\n              <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </Link>\n          )}\n        </div>\n      </form>\n\n      <AdminDashboard \n        flowers={filtered} \n        selected={selected} \n        searchParams={sp}\n        currentUserEmail={session?.user?.email || (hasValidAuth ? (sp?.auth ? atob(sp.auth).split(':')[0] : '') : '')}\n      />\n    </main>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/george/Dropbox/machine_learning/margaret-flower-app-main/app/api/flowers/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { supabaseServer } from '@/lib/supabaseServer';\n\n/** split \"1;2, 3  4\" -> [\"1\",\"2\",\"3\",\"4\"] */\nfunction splitCodes(raw?: string | null): string[] {\n  if (!raw) return [];\n  return raw\n    .split(/[;, ]+/)\n    .map((s) => s.trim())\n    .filter(Boolean);\n}\n\nexport async function GET(\n  _req: Request,\n  ctx: { params: Promise<{ id: string }> }\n) {\n  const params = await ctx.params;\n  const idNum = Number(params.id);\n  if (!Number.isFinite(idNum)) {\n    return NextResponse.json({ error: 'Invalid id' }, { status: 400 });\n  }\n\n  // Use a basic supabase client for public data access (no auth required)\n  const { createClient } = await import('@supabase/supabase-js');\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n\n  // 1) Base flower row (pull everything so we don’t miss fields)\n  const { data: flower, error: flowerErr } = await supabase\n    .from('flowers')\n    .select('*')\n    .eq('id', idNum)\n    .single();\n\n  if (flowerErr || !flower) {\n    console.error('flower fetch error', flowerErr);\n    return NextResponse.json({ error: 'Not found' }, { status: 404 });\n  }\n\n  // 2) Build lookups. Each may be a single code or delimited list — handle both.\n  const lookups: Record<string, unknown> = {};\n\n  // helper to fetch *one* row by exact code\n  const fetchOne = async (table: string, codeField: string, code?: string | null) => {\n    if (!code) return null;\n    const { data } = await supabase.from(table).select('*').eq(codeField, code).maybeSingle();\n    return data ?? null;\n  };\n\n  // helper to fetch *many* rows by codes\n  const fetchMany = async (table: string, codeField: string, raw?: string | null) => {\n    const codes = splitCodes(raw);\n    if (!codes.length) return [];\n    const { data } = await supabase.from(table).select('*').in(codeField, codes);\n    return data ?? [];\n  };\n\n  // single-or-many lookups (adjusted to your schema names)\n  lookups.height   = await fetchOne('height',   'height_code', flower.height_code);\n  lookups.bloom    = await fetchMany('bloom',   'bloom_code',  flower.bloom_code);\n  lookups.sun      = await fetchMany('sun',     'sun_code',    flower.sun_code);\n  lookups.moisture = await fetchMany('moisture','moist_code',  flower.moist_code);\n  lookups.category = await fetchMany('categories','cat_code',  flower.cat_code);\n  lookups.deer     = await fetchMany('deer',    'deer_code',   flower.deer_code);\n  lookups.wildlife = await fetchMany('wildlife','wild_code',   flower.wild_code);\n  lookups.soil     = await fetchMany('soil',    'soil_code',   flower.soil_code);\n  lookups.credit   = await fetchOne('photo_credits', 'credit_code', flower.credit_code);\n\n  return NextResponse.json({ ...flower, lookups });\n}"],"names":[],"mappings":";;;AAAA;;AAGA,2CAA2C,GAC3C,SAAS,WAAW,GAAmB;IACrC,IAAI,CAAC,KAAK,OAAO,EAAE;IACnB,OAAO,IACJ,KAAK,CAAC,UACN,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,IACjB,MAAM,CAAC;AACZ;AAEO,eAAe,IACpB,IAAa,EACb,GAAwC;IAExC,MAAM,SAAS,MAAM,IAAI,MAAM;IAC/B,MAAM,QAAQ,OAAO,OAAO,EAAE;IAC9B,IAAI,CAAC,OAAO,QAAQ,CAAC,QAAQ;QAC3B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;IAEA,wEAAwE;IACxE,MAAM,EAAE,YAAY,EAAE,GAAG;IACzB,MAAM,WAAW;IAKjB,+DAA+D;IAC/D,MAAM,EAAE,MAAM,MAAM,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAC9C,IAAI,CAAC,WACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,OACT,MAAM;IAET,IAAI,aAAa,CAAC,QAAQ;QACxB,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAY,GAAG;YAAE,QAAQ;QAAI;IACjE;IAEA,+EAA+E;IAC/E,MAAM,UAAmC,CAAC;IAE1C,0CAA0C;IAC1C,MAAM,WAAW,OAAO,OAAe,WAAmB;QACxD,IAAI,CAAC,MAAM,OAAO;QAClB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,MAAM,CAAC,KAAK,EAAE,CAAC,WAAW,MAAM,WAAW;QACvF,OAAO,QAAQ;IACjB;IAEA,uCAAuC;IACvC,MAAM,YAAY,OAAO,OAAe,WAAmB;QACzD,MAAM,QAAQ,WAAW;QACzB,IAAI,CAAC,MAAM,MAAM,EAAE,OAAO,EAAE;QAC5B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,MAAM,CAAC,KAAK,EAAE,CAAC,WAAW;QACtE,OAAO,QAAQ,EAAE;IACnB;IAEA,yDAAyD;IACzD,QAAQ,MAAM,GAAK,MAAM,SAAS,UAAY,eAAe,OAAO,WAAW;IAC/E,QAAQ,KAAK,GAAM,MAAM,UAAU,SAAW,cAAe,OAAO,UAAU;IAC9E,QAAQ,GAAG,GAAQ,MAAM,UAAU,OAAW,YAAe,OAAO,QAAQ;IAC5E,QAAQ,QAAQ,GAAG,MAAM,UAAU,YAAW,cAAe,OAAO,UAAU;IAC9E,QAAQ,QAAQ,GAAG,MAAM,UAAU,cAAa,YAAa,OAAO,QAAQ;IAC5E,QAAQ,IAAI,GAAO,MAAM,UAAU,QAAW,aAAe,OAAO,SAAS;IAC7E,QAAQ,QAAQ,GAAG,MAAM,UAAU,YAAW,aAAe,OAAO,SAAS;IAC7E,QAAQ,IAAI,GAAO,MAAM,UAAU,QAAW,aAAe,OAAO,SAAS;IAC7E,QAAQ,MAAM,GAAK,MAAM,SAAS,iBAAiB,eAAe,OAAO,WAAW;IAEpF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,GAAG,MAAM;QAAE;IAAQ;AAChD","debugId":null}}]
}
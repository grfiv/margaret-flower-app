{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["// middleware.ts\nimport { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nexport async function middleware(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value;\n        },\n        set(name: string, value: string, options: { [key: string]: unknown }) {\n          request.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n          supabaseResponse = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          });\n          supabaseResponse.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n        },\n        remove(name: string, options: { [key: string]: unknown }) {\n          request.cookies.set({\n            name,\n            value: '',\n            ...options,\n          });\n          supabaseResponse = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          });\n          supabaseResponse.cookies.set({\n            name,\n            value: '',\n            ...options,\n            maxAge: -1,\n          });\n        },\n      },\n    }\n  );\n\n  // Refresh session if expired and user has a refresh token\n  await supabase.auth.getSession();\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.redirect,\n  // make sure to:\n  // 1. Pass the request in it, like so:\n  //    const redirectResponse = NextResponse.redirect(redirectUrl, { request })\n  // 2. Copy over the cookies, like so:\n  //    redirectResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n\n  return supabaseResponse;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,IAAI,mBAAmB,4TAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAEA,MAAM,WAAW,CAAA,GAAA,8RAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,OAAO;YACpC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAmC;gBAClE,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA;oBACA,GAAG,OAAO;gBACZ;gBACA,mBAAmB,4TAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACnC,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,iBAAiB,OAAO,CAAC,GAAG,CAAC;oBAC3B;oBACA;oBACA,GAAG,OAAO;gBACZ;YACF;YACA,QAAO,IAAY,EAAE,OAAmC;gBACtD,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;gBACA,mBAAmB,4TAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACnC,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,iBAAiB,OAAO,CAAC,GAAG,CAAC;oBAC3B;oBACA,OAAO;oBACP,GAAG,OAAO;oBACV,QAAQ,CAAC;gBACX;YACF;QACF;IACF;IAGF,0DAA0D;IAC1D,MAAM,SAAS,IAAI,CAAC,UAAU;IAE9B,qEAAqE;IACrE,uEAAuE;IACvE,gBAAgB;IAChB,sCAAsC;IACtC,8EAA8E;IAC9E,qCAAqC;IACrC,wEAAwE;IAExE,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}